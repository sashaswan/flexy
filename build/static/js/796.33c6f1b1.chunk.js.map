{"version":3,"file":"static/js/796.33c6f1b1.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","webpack://my-app/./src/components/Profile/ProfileInfo/Edit.module.css?7f13","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.jsx","components/Profile/ProfileInfo/Edit.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/NewPost/NewPost.module.css?dce9","components/Profile/MyPosts/NewPost/NewPost.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ProfileInfo_background__aSEaE\",\"name\":\"ProfileInfo_name__nzLXx\",\"aboutMe\":\"ProfileInfo_aboutMe__l7xQO\",\"job\":\"ProfileInfo_job__4-3LH\",\"description\":\"ProfileInfo_description__u7GZ5\",\"ava\":\"ProfileInfo_ava__Zv058\",\"circle\":\"ProfileInfo_circle__rrF53\",\"inputfile\":\"ProfileInfo_inputfile__-smF3\",\"upload\":\"ProfileInfo_upload__OKigD\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__-xoik\",\"editStatus\":\"ProfileStatus_editStatus__eytKj\"};","import React, { useState, useEffect } from 'react';\nimport s from './ProfileStatus.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status] );\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div className={s.status}>\n                    <p onDoubleClick={activateEditMode}>{props.status || \"-----\"}</p>\n                </div>\n            }\n            {editMode &&\n                <div className={s.editStatus}>\n                    <input autoFocus={true}\n                        onBlur={deactivateEditMode}\n                        onChange={onStatusChange}\n                        value={status} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Edit_wrapper__2BCXT\",\"box\":\"Edit_box__1uF0N\",\"editButton\":\"Edit_editButton__p8upz\"};","import React from 'react';\nimport { createField } from './../../../common/FormControls';\nimport s from './../../ProfileInfo/Edit.module.css';\nimport { Formik, Form } from 'formik';\n\nconst ProfileDataForm = ({ saveProfile, goToSaveMode, profile }) => {\n\n    // const onSubmit = (values, { setStatus }) => {\n    //     saveProfile(values, setStatus)\n    //     .then(() => {\n    //         return goToSaveMode();\n    //     })\n    // }}\n\n    const onSubmit = (values, {setStatus}) => {\n        saveProfile(values, setStatus)\n        .then(() =>{\n            goToSaveMode();\n        })\n    }\n\n    return (\n        <Formik initialValues={{\n            fullName: profile.fullName,\n            lookingForAJobDescription: profile.lookingForAJobDescription,\n            aboutMe: profile.aboutMe,\n            lookingForAJob: profile.lookingForAJob,\n            contacts: profile.contacts\n        }}\n        onSubmit={onSubmit}\n        >\n            {({ status }) => (\n            <Form>\n                <div>\n                    {Object.keys(profile.contacts).map(key => {\n                        return (\n                            <div>\n                                <p>{key}: {createField(key, 'contacts.' + key, 'text')}</p>\n                            </div>\n                        )\n                    })}\n                    <p>Full name</p> {createField('Full name', 'fullName', 'text')}\n                    <p>My skills:</p>\n                    {createField('My skills:', 'lookingForAJobDescription', 'text')}\n                    <p>About me:</p>\n                    {createField('About me:', 'aboutMe', 'text')}\n                    {createField('null', 'lookingForAJob', 'checkbox', null, null, 'Looking for a job')}\n                    <p className={s.loginReq}>{status}</p>\n                    <button type='submit' className={s.editButton}>\n                        <p>Save</p>\n                    </button>\n                </div>\n            </Form>\n            )}\n        </Formik>\n    )\n}\nexport default ProfileDataForm;","import React, { useState } from 'react';\nimport s from './../ProfileInfo/Edit.module.css';\nimport ProfileDataForm from './ProfileDataForm/ProfileDataForm';\n\n\nconst Edit = ({ profile, isOwner, saveProfile }) => {\n    let [editMode, setEditMode] = useState(false);\n\n    return (\n        <div className={s.wrapper}>\n            <p>Contacts</p>\n            <div className={s.box}>\n                {editMode\n                    ? <ProfileDataForm profile={profile} saveProfile={saveProfile} goToSaveMode={() => { setEditMode(false) }}/>\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />}\n            </div>\n        </div>\n    )\n}\nexport default Edit;\n\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\n\n    return (\n        <div>\n            {Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\n            })}\n            <p>\n                Looking for a job :\n                {profile.lookingForAJob ? \"yes\" : \"no\"}\n            </p>\n            {profile.lookingForAJob &&\n                <p>\n                    My skills:\n                    {profile.lookingForAJobDescription}\n                </p>}\n            {isOwner &&\n                <button onClick={goToEditMode} className={s.editButton}>\n                    <p>Edit</p>\n                </button>\n            }\n        </div>\n    )\n}\n\nconst Contact = ({ contactTitle, contactValue }) => {\n    return (\n        <div>\n            <p>{contactTitle} : {contactValue}</p>\n        </div>\n    )\n}","import React from 'react';\nimport avatar from './../../../img/avatar.png'\nimport s from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport Edit from './../ProfileInfo/Edit';\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n    if (!profile) {\n        return <Preloader />\n    }\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n    return (\n        <div>\n            <div className={s.background}>\n                <div className={s.center}>\n                    <div className={s.ava}>\n                        <img src={profile.photos.small != null ? profile.photos.small : avatar}\n                            className={s.circle}\n                            alt='profilePicture' />\n                    </div>\n                    <div className={s.description}>\n                        <p className={s.name}>{profile.fullName}</p>\n                        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n                        <p className={s.aboutMe}>{profile.aboutMe}</p>\n                        {isOwner &&\n                            <div>\n                                <input onChange={onMainPhotoSelected} type={'file'}\n                                    id=\"FileUpload\" className={s.inputfile} />\n                                <label htmlFor=\"FileUpload\" className={s.upload}>Upload Photo</label>\n                            </div>}\n                    </div>\n                </div>\n            </div>\n            <Edit profile={profile} isOwner={isOwner} saveProfile={saveProfile} />\n        </div>\n    );\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"MyPosts_box__bfQAZ\",\"title\":\"MyPosts_title__Ln5To\",\"form\":\"MyPosts_form__hrebz\",\"button\":\"MyPosts_button__TKXtI\",\"addPostInput\":\"MyPosts_addPostInput__dAfsT\",\"postreq\":\"MyPosts_postreq__U5tpU\"};","// extracted by mini-css-extract-plugin\nexport default {\"new\":\"NewPost_new__vThmF\",\"postBlock\":\"NewPost_postBlock__COEfq\",\"text\":\"NewPost_text__eZLh5\",\"likes\":\"NewPost_likes__y8GJW\",\"likesCount\":\"NewPost_likesCount__198qo\",\"ava\":\"NewPost_ava__4LY6w\"};","import React from 'react';\nimport s from './NewPost.module.css';\nimport avatar from './../../../../img/avatar.png';\nimport like from './../../../../img/like.png';\n\nconst NewPost = (props) => {\n    return (\n        <div>\n            <div className={s.new}>\n                <div className={s.postBlock}>\n                    <div className={s.ava}>\n                        <img src={avatar} alt='profilePicture' />\n                    </div>\n                    <p className={s.text}>\n                        {props.text}\n                    </p>\n                    <div className={s.likes}>\n                        <img src={like} alt='finger' />\n                        <p className={s.likesCount}>\n                            Likes Count: {props.likes}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NewPost;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport NewPost from './NewPost/NewPost';\nimport { Formik, Form } from 'formik';\nimport { validatePost, createField } from '../../common/FormControls';\n\nconst MyPosts = React.memo(props => {\n\n    let postArray = props.postText.map(n => (<NewPost text={n.text} likes={n.likes} key={n.id} />));\n\n    return (\n        <div>\n            <div className={s.box}>\n                <p className={s.title}>My Posts</p>\n                <AddNewPostText addPost={props.addPost} />\n                {postArray}\n            </div>\n        </div>\n    )\n});\n\nconst AddNewPostText = (props) => {\n    const onSubmit = (values) => {\n        props.addPost(values.newPost)\n    };\n    return (\n        <Formik\n            initialValues={{\n                newPost: '',\n            }}\n            validationSchema={validatePost}\n            onSubmit={onSubmit}\n        >\n            {({ errors, touched }) => (\n                <Form className={s.form}>\n                    <div className={s.addPostInput}>\n                        {createField(\"New Post\", \"newPost\", 'text', validatePost)}\n                        {errors.newPost && touched.newPost ? (<p className={s.postreq}>{errors.newPost}</p>) : null}\n                    </div>\n                    <button className={s.button} type='submit'>New Post</button>\n                </Form>\n            )}\n        </Formik >\n    )\n}\n\nexport default MyPosts;","import MyPosts from './MyPosts';\nimport { addPostActionCreator } from '../../../redux/profileReducer';\nimport {connect} from 'react-redux';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        postText: state.profilePage.postText,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <ProfileInfo isOwner={props.isOwner}\n                savePhoto={props.savePhoto}\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                saveProfile={props.saveProfile} />\n            <MyPostsContainer />\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profileReducer';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push('/login');\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto}\n                saveProfile={this.props.saveProfile}/>\n        );\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\n\nexport default compose(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n    withRouter\n)(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","saveProfile","goToSaveMode","profile","initialValues","fullName","lookingForAJobDescription","aboutMe","lookingForAJob","contacts","onSubmit","values","then","Object","keys","map","key","createField","type","isOwner","ProfileData","goToEditMode","Contact","contactTitle","contactValue","onClick","savePhoto","Preloader","src","photos","small","avatar","alt","target","files","length","id","htmlFor","text","like","likes","MyPosts","React","postArray","postText","n","AddNewPostText","addPost","newPost","validationSchema","validatePost","errors","touched","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter"],"sourceRoot":""}