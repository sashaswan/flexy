{"version":3,"file":"static/js/780.51d426bd.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/NewPost/NewPost.module.css?dce9","components/Profile/MyPosts/NewPost/NewPost.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"background\":\"Profile_background__v5xuG\"};","// extracted by mini-css-extract-plugin\nexport default {\"name\":\"ProfileInfo_name__nzLXx\",\"aboutMe\":\"ProfileInfo_aboutMe__l7xQO\",\"job\":\"ProfileInfo_job__4-3LH\",\"description\":\"ProfileInfo_description__u7GZ5\",\"ava\":\"ProfileInfo_ava__Zv058\",\"circle\":\"ProfileInfo_circle__rrF53\",\"inputfile\":\"ProfileInfo_inputfile__-smF3\",\"upload\":\"ProfileInfo_upload__OKigD\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__-xoik\",\"editStatus\":\"ProfileStatus_editStatus__eytKj\"};","import React, { useState, useEffect } from 'react';\nimport s from './ProfileStatus.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status] );\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div className={s.status}>\n                    <p onDoubleClick={activateEditMode}>{props.status || \"-----\"}</p>\n                </div>\n            }\n            {editMode &&\n                <div className={s.editStatus}>\n                    <input autoFocus={true}\n                        onBlur={deactivateEditMode}\n                        onChange={onStatusChange}\n                        value={status} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport avatar from './../../../img/avatar.png'\nimport s from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\n\nconst profileInfo = ({ profile, status, updateStatus, isOwner, savePhoto }) => {\n    if (!profile) {\n        return <Preloader />\n    }\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n    return (\n        <div>\n            <div className={s.ava}>\n                <img src={profile.photos.small != null ? profile.photos.small : avatar}\n                    className={s.circle}\n                    alt='profilePicture' />\n            </div>\n            <div className={s.description}>\n                <p className={s.name}>{profile.fullName}</p>\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n                <p className={s.aboutMe}>{profile.aboutMe}</p>\n                <p className={s.job}>{profile.lookingForAJobDescription}</p>\n                {isOwner &&\n                    <div>\n                        <input onChange={onMainPhotoSelected} type={'file'}\n                            id=\"exampleFileUpload\" className={s.inputfile} />\n                        <label for=\"exampleFileUpload\" className={s.upload}>Upload File</label>\n                    </div>}\n\n            </div>\n        </div>\n    );\n}\n\nexport default profileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"MyPosts_box__bfQAZ\",\"title\":\"MyPosts_title__Ln5To\",\"form\":\"MyPosts_form__hrebz\",\"button\":\"MyPosts_button__TKXtI\",\"addPostInput\":\"MyPosts_addPostInput__dAfsT\",\"postreq\":\"MyPosts_postreq__U5tpU\"};","// extracted by mini-css-extract-plugin\nexport default {\"new\":\"NewPost_new__vThmF\",\"postBlock\":\"NewPost_postBlock__COEfq\",\"text\":\"NewPost_text__eZLh5\",\"likes\":\"NewPost_likes__y8GJW\",\"likesCount\":\"NewPost_likesCount__198qo\",\"ava\":\"NewPost_ava__4LY6w\"};","import React from 'react';\nimport s from './NewPost.module.css';\nimport avatar from './../../../../img/avatar.png';\nimport like from './../../../../img/like.png';\n\nconst NewPost = (props) => {\n    return (\n        <div>\n            <div className={s.new}>\n                <div className={s.postBlock}>\n                    <div className={s.ava}>\n                        <img src={avatar} alt='profilePicture' />\n                    </div>\n                    <p className={s.text}>\n                        {props.text}\n                    </p>\n                    <div className={s.likes}>\n                        <img src={like} alt='finger' />\n                        <p className={s.likesCount}>\n                            Likes Count: {props.likes}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default NewPost;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport NewPost from './NewPost/NewPost';\nimport { Formik, Form } from 'formik';\nimport { validatePost, createField } from '../../common/FormControls';\n\nconst MyPosts = React.memo(props => {\n\n    let postArray = props.postText.map(n => (<NewPost text={n.text} likes={n.likes} key={n.id} />));\n\n    return (\n        <div>\n            <div className={s.box}>\n                <p className={s.title}>My Posts</p>\n                <AddNewPostText addPost={props.addPost} />\n                {postArray}\n            </div>\n        </div>\n    )\n});\n\nconst AddNewPostText = (props) => {\n    const onSubmit = (values) => {\n        props.addPost(values.newPost)\n    };\n    return (\n        <Formik\n            initialValues={{\n                newPost: '',\n            }}\n            validationSchema={validatePost}\n            onSubmit={onSubmit}\n        >\n            {({ errors, touched }) => (\n                <Form className={s.form}>\n                    <div className={s.addPostInput}>\n                        {createField(\"New Post\", \"newPost\", 'text', validatePost)}\n                        {errors.newPost && touched.newPost ? (<p className={s.postreq}>{errors.newPost}</p>) : null}\n                    </div>\n                    <button className={s.button} type='submit'>New Post</button>\n                </Form>\n            )}\n        </Formik >\n    )\n}\n\nexport default MyPosts;","import MyPosts from './MyPosts';\nimport { addPostActionCreator } from '../../../redux/profileReducer';\nimport {connect} from 'react-redux';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        postText: state.profilePage.postText,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <div className={s.background}>\n                <div className={s.center}>\n                    <ProfileInfo isOwner={props.isOwner}\n                        savePhoto={props.savePhoto}\n                        profile={props.profile}\n                        status={props.status}\n                        updateStatus={props.updateStatus} />\n                </div>\n            </div>\n            <MyPostsContainer />\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus, savePhoto } from '../../redux/profileReducer';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push('/login');\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                isOwner={!this.props.match.params.userId}\n                profile={this.props.profile}\n                status={this.props.status}\n                updateStatus={this.props.updateStatus}\n                savePhoto={this.props.savePhoto} />\n        );\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\n\nexport default compose(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto }),\n    withRouter\n)(ProfileContainer);"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","profile","isOwner","savePhoto","Preloader","src","photos","small","avatar","alt","fullName","aboutMe","lookingForAJobDescription","target","files","length","type","id","for","text","like","likes","MyPosts","React","postArray","postText","map","n","AddNewPostText","addPost","initialValues","newPost","validationSchema","validatePost","onSubmit","values","errors","touched","createField","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ProfileInfo","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter"],"sourceRoot":""}